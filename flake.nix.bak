{
  nixConfig = {
    extra-substituters = [
      "https://bbigras-nix-config.cachix.org"
      "https://nix-community.cachix.org"
      "https://nix-on-droid.cachix.org"
      "https://pre-commit-hooks.cachix.org"
      "https://cosmic.cachix.org"
    ];
    extra-trusted-public-keys = [
      "bbigras-nix-config.cachix.org-1:aXL6Q9Oi0jyF79YAKRu17iVNk9HY0p23OZX7FA8ulhU="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      "nix-on-droid.cachix.org-1:56snoMJTXmDRC1Ei24CmKoUqvHJ9XCp+nidK7qkMQrU="
      "pre-commit-hooks.cachix.org-1:Pkk3Panw5AW24TOv6kz3PvLhlH8puAsJTBbOPmBo7Rc="
      "cosmic.cachix.org-1:Dya9IyXD4xdBehWjrkPv6rtxpmMdRel02smYzA85dPE="
    ];
  };

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    nixpkgs-unstable.url = "github:/nixos/nixpkgs/nixpkgs-unstable";
    # stylix.url = "github:nix-community/stylix/release-25.05";
    home-manager = {
      url = "github:nix-community/home-manager/release-25.05";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    ags = {
      url = "github:aylur/ags/v1";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-mineral = {
      url = "github:cynicsketch/nix-mineral"; # Refers to the main branch and is updated to the latest commit when you use "nix flake update"
      # url = "github:cynicsketch/nix-mineral/v0.1.6-alpha" # Refers to a specific tag and follows that tag until you change it
      # url = "github:cynicsketch/nix-mineral/cfaf4cf15c7e6dc7f882c471056b57ea9ea0ee61" # Refers to a specific commit and follows that until you change it
      flake = false;
    };
    flake-parts.url = "github:hercules-ci/flake-parts";
    nix-index-db.url = "github:nix-community/nix-index-database";
    disko.url = "github:nix-community/disko/latest";
    disko.inputs.nixpkgs.follows = "nixpkgs";
    nur = {
          url = "github:nix-community/NUR";
          inputs.nixpkgs.follows = "nixpkgs";
        };     
    nix-vscode-extensions.url = "github:nix-community/nix-vscode-extensions";
    catppuccin.url = "github:catppuccin/nix";
    nix-fast-build = {
      url = "github:bbigras/nix-fast-build/impure";
      inputs = {
        flake-parts.follows = "flake-parts";
        nixpkgs.follows = "nixpkgs";
      };
    };
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    git-hooks = {
      url = "github:cachix/git-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

 outputs = inputs @ { self, flake-parts, ... }:
    flake-parts.lib.mkFlake { inherit inputs; } ({
    system = "x86_64-linux";
    imports = [
        # Import flake-parts modules from other flakes here
        inputs.treefmt-nix.flakeModule
        inputs.git-hooks.flakeModule # Added if you want pre-commit check
      ];
    perSystem =
        ctx@{ 
          config, # The flake-parts configuration for the current system
          self', # The flake outputs for the current system
          inputs', # The inputs, scoped to the current system
          pkgs, # The nixpkgs instance for the current system
          system, # The current system architecture (e.g., "x86_64-linux")
          ...
        }:
let
          # Define pkgs with overlays and allowUnfree for this system
          # This replaces your 'pkgs = import nixpkgs { ... }' from the old structure
          pkgsWithOverlays = import inputs.nixpkgs {
            inherit system;
            config = {
              allowUnfree = true;
              allowBroken = false; # This was 'channelsConfig.allowBroken' before
              # You can also add more granular allowUnfreePredicate if needed, like in the reference
            };
            overlays = [
              inputs.nur.overlays.default
              inputs.nix-vscode-extensions.overlays.default
              (import ./overlays) # Assuming ./overlays is a valid Nix expression for an overlay
              (final: prev: {
                unstable = import inputs.nixpkgs-unstable {
                  system = final.system;
                  config = final.config;
                };
              })
            ];
          };
          username = "lf"; # Moved username here for perSystem scope
          host = "lf-nix"; # Moved host here for perSystem scope
        in
        {
          # This is where your system-specific outputs go
          # For example, you can define devShells, packages, checks, etc. here

          # You can define packages or devShells here, for example:
          # packages.hello = pkgsWithOverlays.hello;
          # devShells.default = pkgsWithOverlays.mkShell { packages = [ pkgsWithOverlays.cowsay ]; };

          # Pre-commit hooks configuration
          # This comes from the git-hooks.flakeModule import
          pre-commit = {
            check.enable = true;
            settings.hooks = {
              actionlint.enable = true;
              nil.enable = true;
              shellcheck.enable = true;
              statix.enable = false; # Set to false as in reference
              treefmt.enable = true;
            };
          };

          # Treefmt configuration
          # This comes from the treefmt-nix.flakeModule import
          treefmt = {
            projectRootFile = "flake.nix";
            flakeCheck = false; # Covered by git-hooks check
            programs = {
              nixfmt.enable = true;
              shfmt = {
                enable = true;
                indent_size = 0;
              };
            };
          };

          # If you have per-system configurations like specific packages or devShells,
          # they would go here. Your NixOS configurations are usually global, so they
          # are defined outside this 'perSystem' block, as shown below in the 'flake' section.
        };

      # This 'flake' section defines the top-level outputs of your flake,
      # accessible via `nix build .#nixosConfigurations.lf-nix` etc.
      flake = {
        # Your NixOS configurations
        nixosConfigurations."lf-nix" = inputs.nixpkgs.lib.nixosSystem {
          specialArgs = {
            inherit (self.inputs) nixpkgs nixpkgs-unstable home-manager ags nix-mineral flake-parts nix-index-db disko nur nix-vscode-extensions catppuccin nix-fast-build treefmt-nix; # Pass all inputs
            inherit (inputs) git-hooks; # Pass git-hooks if needed in modules
            system = "x86_64-linux"; # Explicitly define system here for this configuration
            username = "lf";
            host = "lf-nix";
          };
          modules = [
            ./cache.nix
            ./hosts/lf-nix/config.nix
            "${inputs.nix-mineral}/nix-mineral.nix" # Use inputs.nix-mineral
            inputs.home-manager.nixosModules.home-manager
            {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.backupFileExtension = "backup";
              home-manager.users."lf" = {
                imports = [ ./hosts/lf-nix/home.nix ];
              };
              # home-manager.extraSpecialArgs = { inherit inputs username system; }; # This is now passed to the top-level specialArgs
            }
            inputs.disko.nixosModules.disko # Use inputs.disko
            # Overlays are generally defined in pkgs definition in perSystem or in a separate file,
            # but if you specifically need them applied *only* to this NixOS config's pkgs,
            # then this structure might be okay, but it's less common with flake-parts.
            # I've moved the main overlays to the perSystem pkgs definition for consistency.
            # If you need specific overlays for the nixosSystem, you can add an 'overlays' attribute directly here:
            {
              nixpkgs.overlays = [
                inputs.nur.overlays.default
                inputs.nix-vscode-extensions.overlays.default
                (import ./overlays)
                (final: prev: {
                  unstable = import inputs.nixpkgs-unstable {
                    system = final.system;
                    config = final.config;
                  };
                })
              ];
            }
          ];
        };

        # Your Home Manager configurations
        homeConfigurations."lf" = inputs.home-manager.lib.homeManagerConfiguration {
          pkgs = (import inputs.nixpkgs {
            system = "x86_64-linux"; # Specify system for Home Manager's pkgs
            config.allowUnfree = true;
          });
          extraSpecialArgs = {
            inherit (self.inputs) nixpkgs nixpkgs-unstable home-manager ags nix-mineral flake-parts nix-index-db disko nur nix-vscode-extensions catppuccin nix-fast-build treefmt-nix;
            inherit (inputs) git-hooks;
            username = "lf";
            system = "x86_64-linux";
          };
          modules = [
            ./hosts/lf-nix/home.nix
            {
              home.username = "lf";
              home.homeDirectory = "/home/lf";
              home.stateVersion = "24.11";
              home-manager.backupFileExtension = "backup";
            }
            # This nested homeManagerConfiguration is incorrect,
            # you simply include the module directly in the list
            inputs.nix-index-db.homeManagerModules.nix-index
          ];
        };
      };
    });
}
